
Тести проводяться для оцінки:
1. **Продуктивності**: Вимірювання часу відповіді за допомогою Locust.
2. **Масштабованості**: Використання кешування через Flask-Caching і Redis.
3. **Безпеки**: Перевірка на SQL-ін'єкції.
4. **Інструментів тестування**: Використання pytest для юніт-тестів.
5. **Документації**: Приклади REST API.

## Необхідні залежності

Перед початком роботи переконайтеся, що у вас встановлені:
- Python 3.8+
- Flask
- Flask-Caching
- Locust
- SQLite3 (для тестування SQL-ін'єкцій)

## Встановлення

1. Клонуйте цей репозиторій:
   ```bash
   git clone https://github.com/killreal2002/magisterska.git
   cd magisterska/flask_tests
   ```

2. Встановіть залежності:
   ```bash
   pip install -r requirements.txt
   ```

3. Запустіть сервер Flask:
   ```bash
   flask run
   ```

## Як виконати тести

### 1. Тестування продуктивності
Запустіть Locust для вимірювання часу відповіді та продуктивності:
```bash
locust -f locustfile.py
```
Відкрийте браузер за адресою `http://127.0.0.1:8089`, налаштуйте параметри та розпочніть тестування.

### 2. Тестування масштабованості
Тести кешування даних виконуються за допомогою Flask-Caching і Redis. Використовуйте файл `scalability_test.py` для перевірки з кешем та без нього.

### 3. Тестування безпеки
Перевірте захист від SQL-ін'єкцій, виконавши скрипт:
```bash
python sql_injection_test.py
```

### 4. Інструменти тестування
Запустіть тести з використанням pytest:
```bash
pytest
```

### 5. Документація
Ознайомтеся з прикладами REST API у файлі `app.py`.

## Результати тестування
Результати відображаються у терміналі, Locust або доступні через REST API.
